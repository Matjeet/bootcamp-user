plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id "org.sonarqube" version "6.0.1.5171"
	id 'jacoco'
}

group = 'com.example.bootcamp'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

jacoco {
	toolVersion = '0.8.12'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	mapStructVersion = "1.5.5.Final"
	mockitoVersion = "5.12.0"
	lombokMapstructBindingVersion = "0.2.0"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation "org.mapstruct:mapstruct:${mapStructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"


	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"



	runtimeOnly 'com.mysql:mysql-connector-j'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation "org.mockito:mockito-core:${mockitoVersion}"
	testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
}

sonarqube {
	properties {
		property "sonar.projectKey", "Bootcamp-users"
		property "sonar.projectName", "Bootcamp users"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.token", "sqp_ded566e51187130c2e6ae5c97fb09ce79519c83f"
		property "sonar.exclusions", "**/domain/model/**, " +
										"**/EducationLevel.java, " +
										"**/BootcampUserApplication.java, " +
										"**/BeanConfig.java, " +
										"**/CourseDiscoverySource.java, " +
										"**/DeveloperRolEnum.java, " +
										"**/StudentConstants.java, " +
										"**/StudentMessage.java, " +
										"**/StudentExceptionHandler.java, " +
										"**/adapter/**, " +
										"**/mapper/**"
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
	}
}
